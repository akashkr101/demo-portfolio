name: Deploy

on:
  workflow_run:
    workflows: ["Sonar"]
    types:
      - completed

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest # The workflow runs on the latest Windows environment.
    steps:
    # Step 1: Check out the repository to the GitHub runner.
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Download the artifact (JAR file) from the completed "Build CI" workflow.
    - name: Download build file artifact from Build CI workflow
      uses: actions/download-artifact@v4
      with:
          name: PrototipoFrontend
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN 
          
    #Step 3: List down the downloaded build file      
    - name: List contents to verify artifact location
      run: |
        echo "check in all folders"
        Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse
      shell: pwsh
          
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and push Docker image with branch-based tag
        run: |
          TAG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
          IMAGE=${{ secrets.DOCKER_USERNAME }}/demo-portfolio:$TAG
          docker build -t $IMAGE .
          docker push $IMAGE

  run-container:
    name: Run Docker Container
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Pull Docker image
        run: |
          TAG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
          docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-v1:$TAG
      - name: Run Docker container
        run: |
          TAG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
          docker run -d -p 8080:80 --name portfolio-v1 ${{ secrets.DOCKER_USERNAME }}/portfolio-v1:$TAG

  test-container:
    name: Test Deployed Container
    runs-on: ubuntu-latest
    needs: run-container
    steps:
      - name: Wait for container to be ready
        run: sleep 10
      - name: Test container with curl
        run: echo "Test Pass"
        # You can replace this with actual curl test:
        # curl -I http://localhost:8080

  discord-notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: test-container
    #if: always()
    steps:
      - name: Send Discord notification to branch-specific channel
        run: |
          BRANCH="${{ github.ref_name }}"
          STATUS_RESULT="${{ needs.test-container.result }}"
          if [ "$STATUS_RESULT" = "success" ]; then
            STATUS="‚úÖ *Build passed* on branch \`$BRANCH\`"
          else
            STATUS="‚ùå *Build failed* on branch \`$BRANCH\`"
          fi
          case "$BRANCH" in
            dev)
              WEBHOOK="${{ secrets.DISCORD_DEV_WEBHOOK }}"
              ;;
            feature-dev)
              WEBHOOK="${{ secrets.DISCORD_FEATURE_WEBHOOK }}"
              ;;
            qa)
              WEBHOOK="${{ secrets.DISCORD_QA_WEBHOOK }}"
              ;;
            prod)
              WEBHOOK="${{ secrets.DISCORD_PROD_WEBHOOK }}"
              ;;
            *)
              echo "No webhook configured for branch: $BRANCH"
              exit 0
              ;;
          esac

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$STATUS\nüì¶ Repo: ${{ github.repository }}\nüîó [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
            "$WEBHOOK"
