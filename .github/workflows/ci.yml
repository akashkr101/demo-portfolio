name: Build

on:
  #push:
  #  branches:
  #    - master  # Trigger the workflow when code is pushed to the main branch
  #pull_request:
  #  branches:
  #    - master  # Trigger the workflow for pull requests targeting the main branch
  workflow_dispatch:  # Allow manual trigger
    inputs:
      environment:
        description: select environment
        required: true
        default: dev
        type: choice
        options:
          #- dev
          #- qa
          #- prod
          - master

jobs:
  checkout-code:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      safe_tag: ${{ steps.branch_tag.outputs.tag }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Get safe tag from branch name
        id: branch_tag
        run: |
          BRANCH=${{ github.ref_name }}
          SAFE_TAG=$(echo "$BRANCH" | tr '/' '-')
          echo "tag=$SAFE_TAG" >> $GITHUB_OUTPUT

  build-angular:
    name: Build Angular App
    runs-on: ubuntu-latest
    needs: checkout-code
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'  # Enable caching for npm dependencies
          cache-dependency-path: package-lock.json  # Use package-lock.json for cache verification
          
      - name: Install dependencies
        #run: npm install
        run: npm ci # Install dependencies using a clean install (ensures reproducible builds)
        
      - name: Build Angular app
        run: npm run build

      - name: Compress Angular Build (Shell)
        run: |
          if [ ! -d "dist" ]; then
            echo "dist folder does not exist"
            exit 1
          fi
          zip -r portfolio.zip dist/

      - name: check
        run: |
          ls
          ls dist
          pwd
          echo $GITHUB_WORKSPACE

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: portfolio
          path: portfolio.zip

      - name: Create archive directory
        run: sudo mkdir -p /archive && sudo chmod 777 /archive

      # Step 2: Download the artifact (JAR file) from the completed "Build CI" workflow.
      - name: Download build file artifact
        uses: actions/download-artifact@v4
        with:
            name: portfolio
            path: ./archive
            #run-id: ${{ github.event.workflow_run.id }}
            
      - name: check
        run: |
          echo "one"
          ls
          echo "two"
          ls dist
          echo "three"
          pwd
          echo "four"
          echo $GITHUB_WORKSPACE
          echo "five"
          ls ./archive
  
      #Step 3: List down the downloaded build file      
      - name: List contents to verify artifact location
        run: |
          echo "check in all folders"
          find "$GITHUB_WORKSPACE"
        shell: bash

      # Step 3: Install rclone (a tool for managing cloud storage) using Chocolatey.
      - name: Install rclone
        run: |
            choco install rclone -y
            rclone version
