pipeline {
    agent any
    environment {
        BRANCH_NAME = "${env.BRANCH_NAME ?: env.GIT_BRANCH}"
        dockerhub = 'dockerhub-credentials-id'         // Jenkins credential ID
        buildTag = "v${env.BUILD_NUMBER}"              // Auto-incremental version tag
        dateTag = "${new Date().format('yyyy-MM-dd')}" //if you want to tag the image with date you can use this
        imageName = 'akash63/portfolio-v2'  // this is for create docker image and the same it will be used to push to the dockerhub
        PATH = "/opt/sonar-scanner/bin:$PATH"  //This is for sonar-scanner
    }
    stages {
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'Jenkins-webhooks', url: 'https://github.com/akashkr101/portfolio-v2.git']])
            }
        }

        stage('Install & Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Prepare SonarQube analysis') {
            steps {
                script {
                    echo "Running SonarQube analysis for branch: ${BRANCH_NAME}"
                    if (BRANCH_NAME == 'origin/dev') {
                        env.SONAR_PROJECT_KEY = 'portfolio-dev'
                        env.SONAR_ENVIRONMENT = 'dev'
                    } else if (BRANCH_NAME == 'origin/qa') {
                        env.SONAR_PROJECT_KEY = 'portfolio-qa'
                        env.SONAR_ENVIRONMENT = 'qa'
                    } else if (BRANCH_NAME == 'origin/master') {
                        env.SONAR_PROJECT_KEY = 'portfolio-master'
                        env.SONAR_ENVIRONMENT = 'master'
                    } else {
                        error("Unknown branch: ${BRANCH_NAME}")
                    }
                }
            }
        }
        stage('Verify sonar-scanner') {
            steps {
                echo 'new stage'
                sh 'sonar-scanner --version'  // Check if sonar-scanner is available
                //sh '/opt/sonar-scanner/bin/sonar-scanner --version'
            }
        }
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') { // Name of your SonarQube server configured in Jenkins
                    sh '''
                    echo "Running sonar-scanner with the following parameters:"
                    echo "sonar.projectKey=${SONAR_PROJECT_KEY}"
                    echo "sonar.environment=${SONAR_ENVIRONMENT}"
                    sonar-scanner \
                      -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                      -Dsonar.environment=${SONAR_ENVIRONMENT} \
                      -Dsonar.sources=src
                    '''
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    sh '''
                        # Get a list of all running containers
                        containers=$(docker ps --filter "ancestor=portfolio/demo" -q)
                        # Check if there are any running containers
                        if [ -z "$containers" ]; then
                            echo "No 'portfolio' containers are running."
                        else
                            echo "Stopping and removing portfolio containers."
                            docker stop $containers
                            docker rm $containers
                        fi
                    '''
                    sh '''
                        # Get a list of all Docker images
                        images=$(docker images --filter "reference=*portfolio/demo*" -q)
                        # Check if there are any Docker images
                        if [ -z "$images" ]; then
                            echo "No 'portfolio' images found."
                        else
                            echo "Removing 'portfolio' images."
                            docker rmi -f $images
                        fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image with tags: ${imageName}:${buildTag} and ${imageName}:latest"
                    sh "docker build -t ${imageName}:${buildTag} -t ${imageName}:latest ."
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                        echo "Pushing Docker image to DockerHub..."
                        sh "docker images | grep ${imageName}"
                        docker.withRegistry('https://index.docker.io/v1/', dockerhub) {
                          echo "Pushing tag: ${imageName}:${buildTag}"
                          docker.image("${imageName}:${buildTag}").push()
  
                          echo "Pushing tag: ${imageName}:latest"
                          docker.image("${imageName}:latest").push()
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    //sh "docker run -d -p 7000:80 --name demo ${imageName}:${buildTag}" //if you want the container with build tag
                    sh "docker run -d -p 7000:80 --name demo ${imageName}:latest"      // if you want container with latest tag
                    sh 'docker ps -a'
                }
            }
        }
    }

    post {
        always {
          sh 'docker image prune -f'
          cleanWs()  // Cleans workspace after each build
        }
        success {
            echo '✅ Build succeeded!'
        }
        failure {
            echo '❌ Build failed!'
        }
        unstable {
        echo 'Build is unstable.'
        }
        changed {
            echo 'Build status changed.'
        }
        aborted {
            echo 'Build was aborted.'
        }
    }
}
