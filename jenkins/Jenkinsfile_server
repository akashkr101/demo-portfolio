pipeline {
    agent any
    environment {
        BRANCH_NAME = "${env.BRANCH_NAME ?: env.GIT_BRANCH}"
        dockerhub = 'dockerhub-credentials-id'         // Jenkins credential ID
        buildTag = "v1.0.${env.BUILD_ID}"              // Auto-incremental version tag
        dateTag = "${new Date().format('yyyy-MM-dd')}"
        imageName = 'akash63/demo'  //If it is not there in dockerhub it will create repo automatically but we'll have to change all places
    }
    stages {
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'Jenkins-webhooks', url: 'https://github.com/akashkr101/portfolio-v2.git']])
            }
        }

        stage('Install & Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Prepare SonarQube analysis') {
            steps {
                script {
                    echo "Running SonarQube analysis for branch: ${BRANCH_NAME}"
                    if (BRANCH_NAME == 'origin/dev') {
                        env.SONAR_PROJECT_KEY = 'portfolio-dev'
                        env.SONAR_ENVIRONMENT = 'dev'
                    } else if (BRANCH_NAME == 'origin/qa') {
                        env.SONAR_PROJECT_KEY = 'portfolio-qa'
                        env.SONAR_ENVIRONMENT = 'qa'
                    } else if (BRANCH_NAME == 'origin/master') {
                        env.SONAR_PROJECT_KEY = 'portfolio-master'
                        env.SONAR_ENVIRONMENT = 'master'
                    } else {
                        error("Unknown branch: ${BRANCH_NAME}")
                    }
                }
            }
        }
        stage('Verify sonar-scanner') {
            steps {
                echo 'new stage'
                sh 'sonar-scanner --version'  // Check if sonar-scanner is available
            }
        }
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') { // Name of your SonarQube server configured in Jenkins
                    sh '''
                    echo "Running sonar-scanner with the following parameters:"
                    echo "sonar.projectKey=${SONAR_PROJECT_KEY}"
                    echo "sonar.environment=${SONAR_ENVIRONMENT}"
                    sonar-scanner \
                      -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                      -Dsonar.environment=${SONAR_ENVIRONMENT} \
                      -Dsonar.sources=src
                    '''
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    sh '''
                        # Get a list of all running containers
                        containers=$(docker ps --filter "ancestor=akash63/demo" -q)
                        # Check if there are any running containers
                        if [ -z "$containers" ]; then
                            echo "No 'portfolio' containers are running."
                        else
                            echo "Stopping and removing portfolio containers."
                            docker stop $containers
                            docker rm $containers
                        fi
                    '''
                    sh '''
                        # Get a list of all Docker images
                        images=$(docker images --filter "reference=*akash63/demo*" -q)
                        # Check if there are any Docker images
                        if [ -z "$images" ]; then
                            echo "No 'portfolio' images found."
                        else
                            echo "Removing 'portfolio' images."
                            docker rmi -f $images
                        fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerUsername = "akash63"
                    def imageName = "${dockerUsername}/demo"
                    docker.build("${imageName}:${buildTag}")  // buildTag = v1.0.${env.BUILD_ID}
                    docker.build("${imageName}:latest")       // also tag as latest
                    sh "docker tag ${imageName}:${buildTag} ${imageName}:latest"
                    //sh "docker tag ${imageName}:${buildTag} ${imageName}:${dateTag}"
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                        docker.withRegistry('https://index.docker.io/v1/', dockerhub) {
                        //docker.image("${imageName}:${buildTag}").push() //This will push one more image with build tag
                        docker.image("${imageName}:latest").push()
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    //sh "docker run -d -p 7000:80 --name demo ${imageName}:${buildTag}" //if you want the container with build tag
                    sh "docker run -d -p 7000:80 --name demo ${imageName}:latest"      // if you want container with latest tag
                    sh 'docker ps -a'
                }
            }
        }
    }

    post {
        always {
        sh 'docker image prune -f'
        }
        success {
            echo "Pipeline success"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}
