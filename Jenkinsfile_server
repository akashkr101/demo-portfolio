pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub' // Replace with your Jenkins credentials ID
        IMAGE_NAME = 'akash63/demo'
        BRANCH_NAME = "${env.BRANCH_NAME ?: env.GIT_BRANCH}"
        APP_NAME = "portfolio-v2"
		    RELEASE = "2.0.0"
		    DOCKER_USER = "akash63"
		    DOCKER_PASS = "dockerhub"
		    //IMAGE_NAME = "${DOCKER_USER}" +"/"+ "${APP_NAME}"
		    IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
      }

    stages {
        stage('checkout') {
            steps {
                //checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[credentialsId: 'pipeline', url: 'https://github.com/akashkr101/portfolio.git']])
                checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[credentialsId: 'Jenkins-webhooks', url: 'https://github.com/akashkr101/portfolio.git']])
            }
        }

        stage('Install & Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    sh '''
                        # Get a list of all running containers
                        containers=$(docker ps --filter "ancestor=portfolio-v2" -q)
                        # Check if there are any running containers
                        if [ -z "$containers" ]; then
                            echo "No 'portfolio' containers are running."
                        else
                            echo "Stopping and removing portfolio containers."
                            docker stop $containers
                            docker rm $containers
                        fi
                    '''
                    sh '''
                        # Get a list of all Docker images
                        images=$(docker images --filter "reference=*portfolio*" -q)
                        # Check if there are any Docker images
                        if [ -z "$images" ]; then
                            echo "No 'portfolio' images found."
                        else
                            echo "Removing 'portfolio' images."
                            docker rmi -f $images
                        fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def currentDate = new Date().format('dd-MM')
                    def branch = env.GIT_BRANCH?.replaceAll('origin/', '')?.replaceAll('/', '-')
                    def buildNum = env.BUILD_NUMBER
                    def buildTag = "${branch}-${buildNum}-${currentDate}"
        
                    echo "Docker Tag: ${buildTag}"
        
                    // Build once with main tag
                    dockerImage = docker.build("${IMAGE_NAME}:${buildTag}")
        
                    // Add 'latest' tag to the same image (locally)
                    sh "docker tag ${IMAGE_NAME}:${buildTag} ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS) {
                        dockerImage.push("${buildTag}")
                        dockerImage.push("latest")
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sh 'docker run -d -p 7000:80  portfolio-v2'
                    sh 'docker ps -a'
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline success"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}
